/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as PlayerRouteImport } from './routes/player'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PlaylistsIndexRouteImport } from './routes/playlists.index'
import { Route as CollectionsIndexRouteImport } from './routes/collections.index'
import { Route as PlaylistsIdRouteImport } from './routes/playlists.$id'
import { Route as CollectionsIdRouteImport } from './routes/collections.$id'
import { ServerRoute as AuthSpotifyServerRouteImport } from './routes/auth.spotify'
import { ServerRoute as AuthSessionServerRouteImport } from './routes/auth.session'
import { ServerRoute as AuthLogoutServerRouteImport } from './routes/auth.logout'
import { ServerRoute as ApiCollectionsServerRouteImport } from './routes/api.collections'
import { ServerRoute as AuthSpotifyCallbackServerRouteImport } from './routes/auth.spotify.callback'
import { ServerRoute as ApiCollectionsIdServerRouteImport } from './routes/api.collections.$id'
import { ServerRoute as ApiCollectionsIdItemsServerRouteImport } from './routes/api.collections.$id.items'

const rootServerRouteImport = createServerRootRoute()

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const PlayerRoute = PlayerRouteImport.update({
  id: '/player',
  path: '/player',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistsIndexRoute = PlaylistsIndexRouteImport.update({
  id: '/playlists/',
  path: '/playlists/',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsIndexRoute = CollectionsIndexRouteImport.update({
  id: '/collections/',
  path: '/collections/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistsIdRoute = PlaylistsIdRouteImport.update({
  id: '/playlists/$id',
  path: '/playlists/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsIdRoute = CollectionsIdRouteImport.update({
  id: '/collections/$id',
  path: '/collections/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSpotifyServerRoute = AuthSpotifyServerRouteImport.update({
  id: '/auth/spotify',
  path: '/auth/spotify',
  getParentRoute: () => rootServerRouteImport,
} as any)
const AuthSessionServerRoute = AuthSessionServerRouteImport.update({
  id: '/auth/session',
  path: '/auth/session',
  getParentRoute: () => rootServerRouteImport,
} as any)
const AuthLogoutServerRoute = AuthLogoutServerRouteImport.update({
  id: '/auth/logout',
  path: '/auth/logout',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCollectionsServerRoute = ApiCollectionsServerRouteImport.update({
  id: '/api/collections',
  path: '/api/collections',
  getParentRoute: () => rootServerRouteImport,
} as any)
const AuthSpotifyCallbackServerRoute =
  AuthSpotifyCallbackServerRouteImport.update({
    id: '/callback',
    path: '/callback',
    getParentRoute: () => AuthSpotifyServerRoute,
  } as any)
const ApiCollectionsIdServerRoute = ApiCollectionsIdServerRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiCollectionsServerRoute,
} as any)
const ApiCollectionsIdItemsServerRoute =
  ApiCollectionsIdItemsServerRouteImport.update({
    id: '/items',
    path: '/items',
    getParentRoute: () => ApiCollectionsIdServerRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/player': typeof PlayerRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/collections/$id': typeof CollectionsIdRoute
  '/playlists/$id': typeof PlaylistsIdRoute
  '/collections': typeof CollectionsIndexRoute
  '/playlists': typeof PlaylistsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/player': typeof PlayerRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/collections/$id': typeof CollectionsIdRoute
  '/playlists/$id': typeof PlaylistsIdRoute
  '/collections': typeof CollectionsIndexRoute
  '/playlists': typeof PlaylistsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/player': typeof PlayerRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/collections/$id': typeof CollectionsIdRoute
  '/playlists/$id': typeof PlaylistsIdRoute
  '/collections/': typeof CollectionsIndexRoute
  '/playlists/': typeof PlaylistsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/player'
    | '/profile'
    | '/search'
    | '/collections/$id'
    | '/playlists/$id'
    | '/collections'
    | '/playlists'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/player'
    | '/profile'
    | '/search'
    | '/collections/$id'
    | '/playlists/$id'
    | '/collections'
    | '/playlists'
  id:
    | '__root__'
    | '/'
    | '/player'
    | '/profile'
    | '/search'
    | '/collections/$id'
    | '/playlists/$id'
    | '/collections/'
    | '/playlists/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlayerRoute: typeof PlayerRoute
  ProfileRoute: typeof ProfileRoute
  SearchRoute: typeof SearchRoute
  CollectionsIdRoute: typeof CollectionsIdRoute
  PlaylistsIdRoute: typeof PlaylistsIdRoute
  CollectionsIndexRoute: typeof CollectionsIndexRoute
  PlaylistsIndexRoute: typeof PlaylistsIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/collections': typeof ApiCollectionsServerRouteWithChildren
  '/auth/logout': typeof AuthLogoutServerRoute
  '/auth/session': typeof AuthSessionServerRoute
  '/auth/spotify': typeof AuthSpotifyServerRouteWithChildren
  '/api/collections/$id': typeof ApiCollectionsIdServerRouteWithChildren
  '/auth/spotify/callback': typeof AuthSpotifyCallbackServerRoute
  '/api/collections/$id/items': typeof ApiCollectionsIdItemsServerRoute
}
export interface FileServerRoutesByTo {
  '/api/collections': typeof ApiCollectionsServerRouteWithChildren
  '/auth/logout': typeof AuthLogoutServerRoute
  '/auth/session': typeof AuthSessionServerRoute
  '/auth/spotify': typeof AuthSpotifyServerRouteWithChildren
  '/api/collections/$id': typeof ApiCollectionsIdServerRouteWithChildren
  '/auth/spotify/callback': typeof AuthSpotifyCallbackServerRoute
  '/api/collections/$id/items': typeof ApiCollectionsIdItemsServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/collections': typeof ApiCollectionsServerRouteWithChildren
  '/auth/logout': typeof AuthLogoutServerRoute
  '/auth/session': typeof AuthSessionServerRoute
  '/auth/spotify': typeof AuthSpotifyServerRouteWithChildren
  '/api/collections/$id': typeof ApiCollectionsIdServerRouteWithChildren
  '/auth/spotify/callback': typeof AuthSpotifyCallbackServerRoute
  '/api/collections/$id/items': typeof ApiCollectionsIdItemsServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/collections'
    | '/auth/logout'
    | '/auth/session'
    | '/auth/spotify'
    | '/api/collections/$id'
    | '/auth/spotify/callback'
    | '/api/collections/$id/items'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/collections'
    | '/auth/logout'
    | '/auth/session'
    | '/auth/spotify'
    | '/api/collections/$id'
    | '/auth/spotify/callback'
    | '/api/collections/$id/items'
  id:
    | '__root__'
    | '/api/collections'
    | '/auth/logout'
    | '/auth/session'
    | '/auth/spotify'
    | '/api/collections/$id'
    | '/auth/spotify/callback'
    | '/api/collections/$id/items'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiCollectionsServerRoute: typeof ApiCollectionsServerRouteWithChildren
  AuthLogoutServerRoute: typeof AuthLogoutServerRoute
  AuthSessionServerRoute: typeof AuthSessionServerRoute
  AuthSpotifyServerRoute: typeof AuthSpotifyServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/player': {
      id: '/player'
      path: '/player'
      fullPath: '/player'
      preLoaderRoute: typeof PlayerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlists/': {
      id: '/playlists/'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof PlaylistsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections/': {
      id: '/collections/'
      path: '/collections'
      fullPath: '/collections'
      preLoaderRoute: typeof CollectionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlists/$id': {
      id: '/playlists/$id'
      path: '/playlists/$id'
      fullPath: '/playlists/$id'
      preLoaderRoute: typeof PlaylistsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections/$id': {
      id: '/collections/$id'
      path: '/collections/$id'
      fullPath: '/collections/$id'
      preLoaderRoute: typeof CollectionsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/auth/spotify': {
      id: '/auth/spotify'
      path: '/auth/spotify'
      fullPath: '/auth/spotify'
      preLoaderRoute: typeof AuthSpotifyServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/auth/session': {
      id: '/auth/session'
      path: '/auth/session'
      fullPath: '/auth/session'
      preLoaderRoute: typeof AuthSessionServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/auth/logout': {
      id: '/auth/logout'
      path: '/auth/logout'
      fullPath: '/auth/logout'
      preLoaderRoute: typeof AuthLogoutServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/collections': {
      id: '/api/collections'
      path: '/api/collections'
      fullPath: '/api/collections'
      preLoaderRoute: typeof ApiCollectionsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/auth/spotify/callback': {
      id: '/auth/spotify/callback'
      path: '/callback'
      fullPath: '/auth/spotify/callback'
      preLoaderRoute: typeof AuthSpotifyCallbackServerRouteImport
      parentRoute: typeof AuthSpotifyServerRoute
    }
    '/api/collections/$id': {
      id: '/api/collections/$id'
      path: '/$id'
      fullPath: '/api/collections/$id'
      preLoaderRoute: typeof ApiCollectionsIdServerRouteImport
      parentRoute: typeof ApiCollectionsServerRoute
    }
    '/api/collections/$id/items': {
      id: '/api/collections/$id/items'
      path: '/items'
      fullPath: '/api/collections/$id/items'
      preLoaderRoute: typeof ApiCollectionsIdItemsServerRouteImport
      parentRoute: typeof ApiCollectionsIdServerRoute
    }
  }
}

interface ApiCollectionsIdServerRouteChildren {
  ApiCollectionsIdItemsServerRoute: typeof ApiCollectionsIdItemsServerRoute
}

const ApiCollectionsIdServerRouteChildren: ApiCollectionsIdServerRouteChildren =
  {
    ApiCollectionsIdItemsServerRoute: ApiCollectionsIdItemsServerRoute,
  }

const ApiCollectionsIdServerRouteWithChildren =
  ApiCollectionsIdServerRoute._addFileChildren(
    ApiCollectionsIdServerRouteChildren,
  )

interface ApiCollectionsServerRouteChildren {
  ApiCollectionsIdServerRoute: typeof ApiCollectionsIdServerRouteWithChildren
}

const ApiCollectionsServerRouteChildren: ApiCollectionsServerRouteChildren = {
  ApiCollectionsIdServerRoute: ApiCollectionsIdServerRouteWithChildren,
}

const ApiCollectionsServerRouteWithChildren =
  ApiCollectionsServerRoute._addFileChildren(ApiCollectionsServerRouteChildren)

interface AuthSpotifyServerRouteChildren {
  AuthSpotifyCallbackServerRoute: typeof AuthSpotifyCallbackServerRoute
}

const AuthSpotifyServerRouteChildren: AuthSpotifyServerRouteChildren = {
  AuthSpotifyCallbackServerRoute: AuthSpotifyCallbackServerRoute,
}

const AuthSpotifyServerRouteWithChildren =
  AuthSpotifyServerRoute._addFileChildren(AuthSpotifyServerRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlayerRoute: PlayerRoute,
  ProfileRoute: ProfileRoute,
  SearchRoute: SearchRoute,
  CollectionsIdRoute: CollectionsIdRoute,
  PlaylistsIdRoute: PlaylistsIdRoute,
  CollectionsIndexRoute: CollectionsIndexRoute,
  PlaylistsIndexRoute: PlaylistsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiCollectionsServerRoute: ApiCollectionsServerRouteWithChildren,
  AuthLogoutServerRoute: AuthLogoutServerRoute,
  AuthSessionServerRoute: AuthSessionServerRoute,
  AuthSpotifyServerRoute: AuthSpotifyServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
